{"version":3,"sources":["Proxy.ts","EventProducer.ts","TextInput.tsx","Login.tsx","TextInputAndButton.tsx","ConversationCard.tsx","LeftPane.tsx","MessageCard.tsx","RightPane.tsx","Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["proxy","inbox","ws","WebSocket","addEventListener","e","p","JSON","parse","data","type","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","packet","this","send","stringify","listeners","listener","obj","splice","findIndex","args","filter","call","Error","TextInput","state","value","props","focus","attrs","autofocus","autoFocus","onEnter","onKeyDown","keyCode","className","onChange","setState","target","onBlur","onFocus","placeholder","Component","Login","email","password","displayName","register","str","sendPacket","staySignedIn","src","width","key","CheckCode","onClick","href","preventDefault","TextInputAndButton","textInput","React","createRef","current","ref","buttonContent","ConversationCard","m","forceUpdate","removeAllEventListener","lastMessage","length","selected","onSelect","name","Date","timeStamp","toLocaleDateString","content","LeftPane","user","tag","text","sendContactRequest","map","selectedConversation","firstMessage","c","MessageCard","own","toLocaleTimeString","PureComponent","RightPane","referenceTo","contentType","onBack","id","senderId","onSend","Main","undefined","App","showLogin","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.049b20c9.chunk.js","sourcesContent":["import { OutgoingPacket, InboxDto, IncomingPacket, MessageDto } from \"./chat\";\nimport { EventProducer } from \"./EventProducer\";\n\nclass Proxy extends EventProducer<ProxyEventMap> {\n    inbox: InboxDto | null = null;\n    private ws: WebSocket;\n    constructor() {\n        super();\n        this.ws = new WebSocket(\"wss://raja.aut.bme.hu/chat/\");\n        this.ws.addEventListener(\"open\", () => {\n        });\n        this.ws.addEventListener(\"message\", e => {\n            let p = JSON.parse(e.data) as IncomingPacket;\n            switch (p.type) {\n                case \"error\":\n                    alert(p.message);\n                    break;\n                case \"login\":\n                    this.inbox = p.inbox;\n                    this.dispatch( \"login\" );\n                    break;\n                case \"message\":\n                    let cid = p.channelId;\n                    this.inbox!.conversations.find(x => x.channelId === cid)?.lastMessages.push(p.message);\n                    this.dispatch( \"message\", cid, p.message );\n                    break;\n                case \"conversationAdded\":\n                    this.inbox!.conversations.push(p.conversation);\n                    this.dispatch( \"conversation\", p.conversation.channelId );\n                    break;\n            }\n        });\n    }\n\n    sendPacket(packet: OutgoingPacket) {\n        this.ws.send(JSON.stringify(packet));\n    }\n}\nexport var proxy = new Proxy();\n\ninterface ProxyEventMap {\n    \"login\": () => void;\n    \"message\": (channelId: string, message: MessageDto) => void;\n    \"conversation\": (channelId: string) => void;\n}","export class EventProducer<M> {\n    private listeners: { type: keyof M, listener, obj?: Object }[] = [];\n    addEventListener<K extends keyof M>(type: K, listener: M[K], obj?: Object) {\n        this.listeners.push({ type, listener, obj });\n    }\n    removeEventListener<K extends keyof M>(type: K, listener: M[K], obj?: Object) {\n        this.listeners.splice(this.listeners.findIndex(x => x.type === type && x.listener === listener), 1);\n    }\n    protected dispatch(type: string, ...args) {\n        for (let listener of this.listeners.filter(x => x.type === type))\n            listener.listener.call(listener.obj, ...args);\n    }\n\n    removeAllEventListener(obj: Object) {\n        if (!obj)\n            throw new Error(\"Must specify object\");\n        this.listeners = this.listeners.filter(x => x.obj !== obj);\n    }\n}","import { Component } from \"react\";\nimport React from \"react\";\nimport './TextInput.css';\n\nexport interface TextInputOptions {\n    value?: string;\n    onChange?: (value: string) => void;\n    type?: \"text\" | \"password\" | \"email\";\n    placeholder?: string;\n    onEnter?: () => void;\n    autofocus?: boolean;\n};\n\nexport class TextInput extends Component<TextInputOptions> {\n    state = { value: this.props.value, focus: false };\n    render() {\n        let attrs = {} as any;\n        if (this.props.autofocus)\n            attrs.autoFocus = true;\n        if (this.props.onEnter)\n            attrs.onKeyDown = e => {\n                if (e.keyCode === 13)\n                    this.props.onEnter!();\n            };\n        return (\n            <div className=\"text-input\" >\n                <input type={this.props.type ?? \"text\"} value={this.state.value}\n                    onChange={e => {\n                        this.setState({ value: e.target.value });\n                        this.props.onChange?.(e.target.value);\n                    }}\n                    onBlur={() => this.setState({ focus: false })}\n                    onFocus={() => this.setState({ focus: true })}\n                    { ...attrs } />\n                <div className=\"focus-indicator\"></div>\n                <label className={this.state.value || this.state.focus ? \"subsided\" : \"\"}>\n                    {this.props.placeholder}\n                </label>\n            </div>);\n    }\n}","import React, { Component } from 'react';\nimport { proxy } from './Proxy';\nimport { TextInput } from './TextInput';\n\ntype MyState = { email: string, password: string, displayName: string, register: boolean };\n\nexport class Login extends Component<{}, MyState> {\n    state = { email: \"\", password: \"\", displayName: \"\", register: false };\n\n    CheckCode(str: string) {\n        if (str === \"JQSN6F\") {\n            this.setState({ displayName: \"Balázs\" });\n            this.setState({ email: str });\n        }\n        else\n        this.setState({ email: str });\n    }\n\n    onClick() {\n        if (this.state.register)\n            proxy.sendPacket({\n                type: \"register\", email: this.state.email, password: this.state.password,\n                displayName: this.state.displayName, staySignedIn: false\n            });\n        else\n            proxy.sendPacket({\n                type: \"login\", email: this.state.email, password: this.state.password,\n                staySignedIn: false\n            });\n    }\n\n    render() {\n        return (\n            <div className=\"login\">\n                <img src=\"logo512.png\" width=\"256\" />\n                {this.state.register &&\n                    <TextInput type=\"text\" placeholder=\"Display Name (Agent Smith)\" value={this.state.displayName}\n                        onChange={e => this.setState({ displayName: e })} key={ this.state.displayName } />}\n                <TextInput type=\"email\" placeholder=\"Email (someone@example.com)\" value={this.state.email}\n                    onChange={e => this.CheckCode(e)} onEnter={() => this.onClick()} autofocus={true} />\n                <TextInput type=\"password\" placeholder=\"Password\" value={this.state.password} onChange={e => this.setState({ password: e })} onEnter={ () => this.onClick() } />\n                <p>{this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \"}\n                    <a href=\"\" onClick={e => {\n                        e.preventDefault();\n                        this.setState(state => ({ register: !state.register })); // pass a function instead of object\n                    }}>\n                        {this.state.register ? \"Login\" : \"Register\"}\n                    </a>\n                </p>\n                <button type=\"button\" onClick={() => this.onClick()}>\n                    {this.state.register ? \"Register\" : \"Login\"}\n                </button>\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\n            </div>);\n    }\n}","import { TextInputOptions, TextInput } from \"./TextInput\";\nimport React, { Component } from \"react\";\n\nexport interface TextInputAndButtonOptions extends TextInputOptions {\n    buttonContent?: string;\n    onClick?: (text: string) => boolean | void;\n}\n\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions>\n{\n    onClick() {\n        if (this.props.onClick?.(this.textInput.current?.state.value ?? \"\"))\n            this.textInput.current?.setState({ value: \"\" });\n    }\n    textInput = React.createRef<TextInput>();\n    render() {\n        return (\n            <div className=\"text-input-and-button\">\n                <TextInput {...this.props} ref={this.textInput} onEnter={() => this.onClick()} />\n                <button type=\"button\" onClick={() => this.onClick()}>\n                    {this.props.buttonContent}\n                </button>\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport { ConversationDto } from \"./chat\";\nimport { proxy } from \"./Proxy\";\n\nexport class ConversationCard extends Component<{\n    conversation: ConversationDto,\n    selected: boolean,\n    onSelect: () => void\n}>\n{\n    componentDidMount() {\n        proxy.addEventListener(\"message\", (cid, m) => {\n            if (cid === this.props.conversation.channelId)\n                this.forceUpdate();\n        }, this);\n    }\n    componentWillUnmount() {\n        proxy.removeAllEventListener(this);\n    }\n\n    render() {\n        let lastMessage = this.props.conversation.lastMessages.length > 0 ?\n            this.props.conversation.lastMessages[this.props.conversation.lastMessages.length - 1] : null;\n        return (\n            <div className={\"conversation-card\" + (this.props.selected ? \" selected\" : \"\")}\n                onClick={() => this.props.onSelect()}>\n                <div className=\"row\">\n                    <span className=\"channel-name\">{this.props.conversation.name}</span>\n                    <span className=\"time\">\n                        {lastMessage && new Date(lastMessage.timeStamp).toLocaleDateString()}\n                    </span>\n                </div>\n                <span className=\"last-message\">{lastMessage?.content}</span>\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport { InboxDto, ConversationDto } from \"./chat\";\nimport { TextInputAndButton } from \"./TextInputAndButton\";\nimport { proxy } from \"./Proxy\";\nimport { ConversationCard } from \"./ConversationCard\";\n\nexport class LeftPane extends Component<{\n    inbox: InboxDto, selectedConversation: ConversationDto | undefined,\n    onSelect: (c: ConversationDto) => void\n}>\n{\n    render() {\n        return (\n            <div className=\"left-pane\">\n                <p className=\"my-tag\">My tag: {this.props.inbox.user.tag}</p>\n                <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\"\n                    buttonContent=\"Inv\"\n                    onClick={text => this.sendContactRequest(text)} />\n                <div className=\"conversations\">\n                    {this.props.inbox.conversations.map(x =>\n                        <ConversationCard\n                            key={x.channelId}\n                            conversation={x}\n                            selected={x === this.props.selectedConversation}\n                            onSelect={() => this.props.onSelect(x)} />)}\n                </div>\n            </div>\n        );\n    }\n\n    sendContactRequest(email: string) {\n        proxy.sendPacket({ type: \"contactRequest\", email, firstMessage: \"Hello\" });\n        return true;\n    }\n\n    componentDidMount() {\n        proxy.addEventListener(\"conversation\", c => this.forceUpdate(), this);\n    }\n    componentWillUnmount() {\n        proxy.removeAllEventListener(this);\n    }\n}","import React, { PureComponent } from \"react\";\nimport { MessageDto } from \"./chat\";\n\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }>\n{\n    render() {\n        return (\n            <div className={\"message-card\" + (this.props.own ? \" own\" : \"\")}>\n                <div className=\"bubble\">\n                    <span className=\"text\">{this.props.message.content}</span>\n                    <span className=\"time\">\n                        {new Date(this.props.message.timeStamp).toLocaleTimeString()}\n                    </span>\n                </div>\n            </div>\n        );\n    }\n}","import { Component } from \"react\";\nimport { ConversationDto } from \"./chat\";\nimport { proxy } from \"./Proxy\";\nimport React from \"react\";\nimport { TextInputAndButton } from \"./TextInputAndButton\";\nimport { MessageCard } from \"./MessageCard\";\n\nexport class RightPane extends Component<{ conversation?: ConversationDto, onBack: () => void }>\n{\n    componentDidMount() {\n        proxy.addEventListener(\"message\", (cid, m) => {\n            if (cid === this.props.conversation?.channelId)\n                this.forceUpdate();\n        }, this);\n    }\n\n    componentWillUnmount() {\n        proxy.removeAllEventListener(this);\n    }\n\n    onSend(text: string) {\n        proxy.sendPacket({\n            type: \"message\", channelId: this.props.conversation!.channelId, referenceTo: 0\n            , contentType: 0, content: \"J: \" + text\n        });\n        return true;\n    }\n\n    render() {\n        return (\n            <div className=\"right-pane column\">\n                {this.props.conversation &&\n                    <>\n                        <div className=\"conversation-header row\">\n                            <button type=\"button\" className=\"only-narrow\"\n                                onClick={() => this.props.onBack()}>Back</button>\n                            <p>{this.props.conversation?.name}</p>\n                        </div>\n                        <div className=\"messages\">\n                            {this.props.conversation?.lastMessages.map(x =>\n                                <MessageCard key={x.id} message={x}\n                                    own={x.senderId === proxy.inbox?.user.id} />)}\n                        </div>\n                        <div className=\"send-message row\">\n                            <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\"\n                                buttonContent=\"Send\" onClick={x => this.onSend(x)} />\n                        </div>\n                    </>\n                }\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport { ConversationDto } from \"./chat\";\nimport { proxy } from \"./Proxy\";\nimport { LeftPane } from \"./LeftPane\";\nimport { RightPane } from \"./RightPane\";\n\nexport class Main extends Component {\n    state = { selectedConversation: undefined as (ConversationDto | undefined) };\n    render() {\n        let className = \"main row \" + (this.state.selectedConversation ? \"right\" : \"left\");\n        return (\n            <div className={className}>\n                <LeftPane\n                    inbox={proxy.inbox!}\n                    selectedConversation={this.state.selectedConversation}\n                    onSelect={c => this.setState({ selectedConversation: c })} />\n                <RightPane conversation={this.state.selectedConversation}\n                    onBack={() => this.setState({ selectedConversation: undefined })} />\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { Login } from './Login'\nimport { proxy } from './Proxy';\nimport { Main } from './Main';\n\n\nexport default class App extends Component {\n  state = { showLogin: true };\n  componentDidMount() {\n    proxy.addEventListener(\"login\", () => this.setState({ showLogin: false }));\n  }\n  render() {\n    return (\n      <div className=\"app\">\n        { this.state.showLogin ? <Login /> : <Main /> }\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}